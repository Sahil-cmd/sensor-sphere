#!/usr/bin/env python3
"""
{sensor_description}
Generated by Sensor Comparison Tool

ROS2 Launch file for {manufacturer} {model}
"""

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.conditions import IfCondition
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node


def generate_launch_description():
    # Sensor Configuration Arguments
    sensor_serial_arg = DeclareLaunchArgument(
        "sensor_serial",
        default_value="",
        description="Serial number of the sensor (optional)",
    )

    sensor_name_arg = DeclareLaunchArgument(
        "sensor_name", default_value="{sensor_id}", description="Name of the sensor"
    )

    left_width_arg = DeclareLaunchArgument(
        "left_width", default_value="{rgb_width}", description="Left camera image width"
    )

    left_height_arg = DeclareLaunchArgument(
        "left_height",
        default_value="{rgb_height}",
        description="Left camera image height",
    )

    right_width_arg = DeclareLaunchArgument(
        "right_width",
        default_value="{rgb_width}",
        description="Right camera image width",
    )

    right_height_arg = DeclareLaunchArgument(
        "right_height",
        default_value="{rgb_height}",
        description="Right camera image height",
    )

    depth_width_arg = DeclareLaunchArgument(
        "depth_width", default_value="{depth_width}", description="Depth image width"
    )

    depth_height_arg = DeclareLaunchArgument(
        "depth_height", default_value="{depth_height}", description="Depth image height"
    )

    fps_arg = DeclareLaunchArgument(
        "fps", default_value="{frame_rate}", description="Frames per second"
    )

    # Range Settings
    min_depth_arg = DeclareLaunchArgument(
        "min_depth",
        default_value="{min_range}",
        description="Minimum detection range in meters",
    )

    max_depth_arg = DeclareLaunchArgument(
        "max_depth",
        default_value="{max_range}",
        description="Maximum detection range in meters",
    )

    # Stereo Settings
    baseline_arg = DeclareLaunchArgument(
        "baseline", default_value="0.12", description="Stereo baseline in meters"
    )

    # Feature Enable/Disable
    enable_left_arg = DeclareLaunchArgument(
        "enable_left", default_value="true", description="Enable left camera stream"
    )

    enable_right_arg = DeclareLaunchArgument(
        "enable_right", default_value="true", description="Enable right camera stream"
    )

    enable_depth_arg = DeclareLaunchArgument(
        "enable_depth", default_value="true", description="Enable depth stream"
    )

    enable_pointcloud_arg = DeclareLaunchArgument(
        "enable_pointcloud",
        default_value="false",
        description="Enable point cloud generation",
    )

    enable_imu_arg = DeclareLaunchArgument(
        "enable_imu",
        default_value="false",
        description="Enable IMU stream if available",
    )

    # TF Settings
    publish_tf_arg = DeclareLaunchArgument(
        "publish_tf", default_value="true", description="Publish TF transforms"
    )

    tf_prefix_arg = DeclareLaunchArgument(
        "tf_prefix",
        default_value=LaunchConfiguration("sensor_name"),
        description="TF frame prefix",
    )

    # Driver Node Configuration
    sensor_driver_node = Node(
        package="{driver_package}",
        executable="{driver_executable}",
        name=[LaunchConfiguration("sensor_name"), "_driver"],
        namespace=LaunchConfiguration("sensor_name"),
        parameters=[
            {
                {
                    "serial_no": LaunchConfiguration("sensor_serial"),
                    "resolution_width": LaunchConfiguration("left_width"),
                    "resolution_height": LaunchConfiguration("left_height"),
                    "frame_rate": LaunchConfiguration("fps"),
                    "depth_fps": LaunchConfiguration("fps"),
                    "enable_left": LaunchConfiguration("enable_left"),
                    "enable_right": LaunchConfiguration("enable_right"),
                    "enable_depth": LaunchConfiguration("enable_depth"),
                    "enable_pointcloud": LaunchConfiguration("enable_pointcloud"),
                    "enable_imu": LaunchConfiguration("enable_imu"),
                    "publish_tf": LaunchConfiguration("publish_tf"),
                    "tf_prefix": LaunchConfiguration("tf_prefix"),
                    "base_frame": [LaunchConfiguration("tf_prefix"), "_link"],
                    "left_frame": [
                        LaunchConfiguration("tf_prefix"),
                        "_left_optical_frame",
                    ],
                    "right_frame": [
                        LaunchConfiguration("tf_prefix"),
                        "_right_optical_frame",
                    ],
                    "depth_frame": [
                        LaunchConfiguration("tf_prefix"),
                        "_depth_optical_frame",
                    ],
                }
            }
        ],
        output="screen",
        emulate_tty=True,
        respawn=True,
    )

    # Stereo Image Processing Node (optional)
    stereo_proc_node = Node(
        package="stereo_image_proc",
        executable="stereo_image_proc",
        name=[LaunchConfiguration("sensor_name"), "_stereo_proc"],
        namespace=LaunchConfiguration("sensor_name"),
        remappings=[
            ("left/image_raw", "left/image_rect_color"),
            ("right/image_raw", "right/image_rect_color"),
            ("left/camera_info", "left/camera_info"),
            ("right/camera_info", "right/camera_info"),
        ],
        condition=IfCondition(LaunchConfiguration("enable_depth")),
    )

    # Static Transform Publisher (optional)
    static_tf_node = Node(
        package="tf2_ros",
        executable="static_transform_publisher",
        name=[LaunchConfiguration("sensor_name"), "_mount_publisher"],
        arguments=[
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "1",
            "world",
            [LaunchConfiguration("tf_prefix"), "_link"],
        ],
        condition=IfCondition(LaunchConfiguration("publish_tf")),
    )

    return LaunchDescription(
        [
            # Launch arguments
            sensor_serial_arg,
            sensor_name_arg,
            left_width_arg,
            left_height_arg,
            right_width_arg,
            right_height_arg,
            depth_width_arg,
            depth_height_arg,
            fps_arg,
            min_depth_arg,
            max_depth_arg,
            baseline_arg,
            enable_left_arg,
            enable_right_arg,
            enable_depth_arg,
            enable_pointcloud_arg,
            enable_imu_arg,
            publish_tf_arg,
            tf_prefix_arg,
            # Nodes
            sensor_driver_node,
            stereo_proc_node,
            static_tf_node,
        ]
    )
