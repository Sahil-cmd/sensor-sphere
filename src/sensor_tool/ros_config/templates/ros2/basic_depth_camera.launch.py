#!/usr/bin/env python3
"""
{sensor_description}
Generated by Sensor Comparison Tool

ROS2 Launch file for {manufacturer} {model}
"""

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.conditions import IfCondition
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node


def generate_launch_description():
    # Sensor Configuration Arguments
    sensor_serial_arg = DeclareLaunchArgument(
        "sensor_serial",
        default_value="",
        description="Serial number of the sensor (optional)",
    )

    sensor_name_arg = DeclareLaunchArgument(
        "sensor_name", default_value="{sensor_id}", description="Name of the sensor"
    )

    rgb_width_arg = DeclareLaunchArgument(
        "rgb_width", default_value="{rgb_width}", description="RGB image width"
    )

    rgb_height_arg = DeclareLaunchArgument(
        "rgb_height", default_value="{rgb_height}", description="RGB image height"
    )

    depth_width_arg = DeclareLaunchArgument(
        "depth_width", default_value="{depth_width}", description="Depth image width"
    )

    depth_height_arg = DeclareLaunchArgument(
        "depth_height", default_value="{depth_height}", description="Depth image height"
    )

    fps_arg = DeclareLaunchArgument(
        "fps", default_value="{frame_rate}", description="Frames per second"
    )

    # Range Settings
    clip_distance_min_arg = DeclareLaunchArgument(
        "clip_distance_min",
        default_value="{min_range}",
        description="Minimum detection range in meters",
    )

    clip_distance_max_arg = DeclareLaunchArgument(
        "clip_distance_max",
        default_value="{max_range}",
        description="Maximum detection range in meters",
    )

    # Feature Enable/Disable
    enable_rgb_arg = DeclareLaunchArgument(
        "enable_rgb", default_value="true", description="Enable RGB stream"
    )

    enable_depth_arg = DeclareLaunchArgument(
        "enable_depth", default_value="true", description="Enable depth stream"
    )

    enable_pointcloud_arg = DeclareLaunchArgument(
        "enable_pointcloud",
        default_value="false",
        description="Enable point cloud generation",
    )

    # TF Settings
    publish_tf_arg = DeclareLaunchArgument(
        "publish_tf", default_value="true", description="Publish TF transforms"
    )

    tf_prefix_arg = DeclareLaunchArgument(
        "tf_prefix",
        default_value=LaunchConfiguration("sensor_name"),
        description="TF frame prefix",
    )

    # Driver Node Configuration
    sensor_driver_node = Node(
        package="{driver_package}",
        executable="{driver_executable}",
        name=[LaunchConfiguration("sensor_name"), "_driver"],
        namespace=LaunchConfiguration("sensor_name"),
        parameters=[
            {
                {
                    "serial_no": LaunchConfiguration("sensor_serial"),
                    "rgb_width": LaunchConfiguration("rgb_width"),
                    "rgb_height": LaunchConfiguration("rgb_height"),
                    "depth_width": LaunchConfiguration("depth_width"),
                    "depth_height": LaunchConfiguration("depth_height"),
                    "fps": LaunchConfiguration("fps"),
                    "clip_distance_min": LaunchConfiguration("clip_distance_min"),
                    "clip_distance_max": LaunchConfiguration("clip_distance_max"),
                    "enable_rgb": LaunchConfiguration("enable_rgb"),
                    "enable_depth": LaunchConfiguration("enable_depth"),
                    "enable_pointcloud": LaunchConfiguration("enable_pointcloud"),
                    "publish_tf": LaunchConfiguration("publish_tf"),
                    "tf_prefix": LaunchConfiguration("tf_prefix"),
                }
            }
        ],
        output="screen",
        emulate_tty=True,
        respawn=True,
    )

    # Static Transform Publisher (optional)
    static_tf_node = Node(
        package="tf2_ros",
        executable="static_transform_publisher",
        name=[LaunchConfiguration("sensor_name"), "_base_link_publisher"],
        arguments=[
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "1",
            "world",
            [LaunchConfiguration("tf_prefix"), "_link"],
        ],
        condition=IfCondition(LaunchConfiguration("publish_tf")),
    )

    return LaunchDescription(
        [
            # Launch arguments
            sensor_serial_arg,
            sensor_name_arg,
            rgb_width_arg,
            rgb_height_arg,
            depth_width_arg,
            depth_height_arg,
            fps_arg,
            clip_distance_min_arg,
            clip_distance_max_arg,
            enable_rgb_arg,
            enable_depth_arg,
            enable_pointcloud_arg,
            publish_tf_arg,
            tf_prefix_arg,
            # Nodes
            sensor_driver_node,
            static_tf_node,
        ]
    )
