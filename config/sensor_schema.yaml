# Sensor Schema (Version 1.0)
# This schema defines the structure for sensor data YAML files.
# It ensures consistency and facilitates validation.

schema_version:
  type: string
  required: true
  regex: '^\d+\.\d+$'
  # Version of the schema used. Format: 'Major.Minor' (e.g., '1.0')

sensor_id:
  type: string
  required: true
  regex: '^[a-zA-Z0-9_-]+$'  # Unique identifier using letters, numbers, underscores, and hyphens

sensor_type:
  type: string
  required: true
  allowed:
    - RGB Camera
    - Depth Camera
    - LiDAR
    - Infrared Camera
    - Stereo Camera
    - Thermal Camera
    - Time-of-Flight Camera
    - Ultrasonic Sensor
    - Radar
    - Structured Light Camera
    # Add more sensor types as needed

manufacturer:
  type: string
  required: true

model:
  type: string
  required: true

resolution:
  type: dict
  required: false
  schema:
    rgb:
      type: dict
      required: false
      schema:
        width:
          type: integer
          required: true
        height:
          type: integer
          required: true
    depth:
      type: dict
      required: false
      schema:
        width:
          type: integer
          required: true
        height:
          type: integer
          required: true
    ir:
      type: dict
      required: false
      schema:
        width:
          type: integer
          required: true
        height:
          type: integer
          required: true
  # Resolution is structured to facilitate calculation of total pixels and aspect ratios.

field_of_view:
  type: dict
  required: false
  schema:
    diagonal:
      type: float
      required: false
    horizontal:
      type: float
      required: false
    vertical:
      type: float
      required: false
  # Field of view in degrees, can include diagonal, horizontal, and vertical components.

min_range:
  type: float
  required: false
  # Minimum effective range in meters.

max_range:
  type: float
  required: false
  # Maximum effective range in meters.

frame_rate:
  type: float
  required: false
  # Frame rate value as a float.

frame_rate_unit:
  type: string
  required: false
  allowed:
    - FPS
    - Hz
  # Unit for frame rate. FPS for cameras, Hz for LiDAR.

latency:
  type: float
  required: false
  # Latency value as a float.

latency_unit:
  type: string
  required: false
  allowed:
    - ms
  # Unit for latency.

environmental_rating:
  type: string
  required: false
  allowed:
    - IP65
    - IP66
    - IP67
    - IP68
    - None
  # Ingress protection rating.

communication_interface:
  type: string
  required: false
  allowed:
    - USB 2.0
    - USB 3.0
    - Gigabit Ethernet
    - Ethernet
    - 100 Mbps Ethernet
    - UDP/IP Ethernet (100BASE-T1)
    - Serial/UART + USB adapter
    - Wi-Fi
    - CAN
    - Other
  # Standardized communication interfaces for cameras and LiDAR.

ros_compatibility:
  type: list
  required: false
  schema:
    type: string
    allowed:
      - ROS1
      - ROS2
  # List of compatible ROS versions.

driver_link_ros1:
  type: string
  required: false
  regex: '^https?://[^\s]+$'
  # URL to ROS1 driver repository.

driver_link_ros2:
  type: string
  required: false
  regex: '^https?://[^\s]+$'
  # URL to ROS2 driver repository.

datasheet_link:
  type: string
  required: false
  regex: '^https?://[^\s]+$'
  # URL to the datasheet.

github_repo:
  type: string
  required: false
  regex: '^https?://(www\.)?github\.com/[^\s]+$'
  # URL to the GitHub repository.

key_features:
  type: list
  required: false
  schema:
    type: string
  # List of key features or unique selling points.

use_cases:
  type: list
  required: false
  schema:
    type: string
  # List of common applications in robotics.

tags:
  type: list
  required: false
  schema:
    type: string
  # Metadata tags for filtering (e.g., 'indoor', 'outdoor').

price_range:
  type: dict
  required: false
  schema:
    min_price:
      type: float
      required: false
    max_price:
      type: float
      required: false
    currency:
      type: string
      required: false
      allowed:
        - SGD
        - USD
        - EUR
        - GBP
        - INR
        # Add other currencies as needed
  # Numeric price range with currency. If price is unknown, this field can be omitted.

supported_platforms:
  type: list
  required: false
  schema:
    type: string
    allowed:
      - Linux
      - Windows
      - macOS
      - Other
  # List of supported operating systems.

power_consumption:
  type: float
  required: false
  # Power consumption value as a float.

power_consumption_unit:
  type: string
  required: false
  allowed:
    - W
    - mW
  # Unit for power consumption.

size:
  type: dict
  required: false
  schema:
    length:
      type: float
      required: true
    width:
      type: float
      required: true
    height:
      type: float
      required: true
    unit:
      type: string
      required: true
      allowed:
        - mm
        - cm
        - m
  # Dimensions of the sensor.

weight:
  type: float
  required: false
  # Weight value as a float.

weight_unit:
  type: string
  required: false
  allowed:
    - g
    - kg
  # Unit for weight.

# ===== LiDAR-SPECIFIC FIELDS =====

channels:
  type: integer
  required: false
  # Number of laser channels (e.g., 16, 32, 64, 128 for multi-channel LiDAR).

angular_resolution:
  type: dict
  required: false
  schema:
    vertical:
      type: float
      required: false
    horizontal:
      type: float
      required: false
    horizontal_min:
      type: float
      required: false
    horizontal_max:
      type: float
      required: false
    typical:
      type: float
      required: false
    unit:
      type: string
      required: false
      allowed:
        - degrees
        - deg
        - °
    note:
      type: string
      required: false
  # Angular resolution for LiDAR sensors in various formats.

horizontal_resolution:
  type: dict
  required: false
  schema:
    options:
      type: list
      required: false
      schema:
        type: integer
    note:
      type: string
      required: false
  # Horizontal resolution options (e.g., 512, 1024, 2048 points per revolution).

angular_sampling_accuracy:
  type: dict
  required: false
  schema:
    vertical:
      type: string
      required: false
    horizontal:
      type: string
      required: false
  # Angular sampling accuracy (e.g., ±0.01°).

returns:
  type: string
  required: false
  # Type/number of returns (e.g., "Single", "Dual", "1 (strongest)", "3 (multi-echo)").

points_per_second:
  type: dict
  required: false
  schema:
    single_return:
      type: integer
      required: false
    dual_return:
      type: integer
      required: false
    32_channel:
      type: integer
      required: false
    64_channel:
      type: integer
      required: false
    128_channel:
      type: integer
      required: false
  # Point cloud generation rate for different modes.

range_accuracy:
  type: string
  required: false
  # Range measurement accuracy (e.g., "±3 cm (typical)", "±3cm (Lambertian)").

range_precision:
  type: dict
  required: false
  schema:
    near:
      type: string
      required: false
    mid:
      type: string
      required: false
    far_mid:
      type: string
      required: false
    far:
      type: string
      required: false
  # Range precision at different distances.

sample_frequency:
  type: dict
  required: false
  schema:
    min:
      type: integer
      required: false
    max:
      type: integer
      required: false
    unit:
      type: string
      required: false
      allowed:
        - Hz
        - kHz
  # Sampling frequency range.

scanning_method:
  type: string
  required: false
  allowed:
    - Mechanical rotation
    - Mechanical Rotation
    - Solid state
    - MEMS mirror
    - Other
  # How the LiDAR performs scanning.

operational_principle:
  type: string
  required: false
  allowed:
    - Time of Flight
    - Laser triangulation
    - FMCW
    - Other
  # LiDAR measurement principle.

measurement_principle:
  type: string
  required: false
  # Specific measurement technology (e.g., HDDM+).

laser_specification:
  type: dict
  required: false
  schema:
    wavelength:
      type: string
      required: false
    laser_class:
      type: string
      required: false
    type:
      type: string
      required: false
    power:
      type: string
      required: false
    safety:
      type: string
      required: false
    modulation:
      type: string
      required: false
    beam_diameter:
      type: string
      required: false
    beam_divergence:
      type: string
      required: false
    light_source:
      type: string
      required: false
  # Laser specifications for LiDAR sensors.

range_performance:
  type: dict
  required: false
  schema:
    high_reflectivity:
      type: string
      required: false
    low_reflectivity:
      type: string
      required: false
  # Range performance under different reflectivity conditions.

response_time:
  type: float
  required: false
  # Response time value as a float.

response_time_unit:
  type: string
  required: false
  allowed:
    - ms
    - μs
    - s
  # Unit for response time.

data_latency:
  type: string
  required: false
  # Data processing latency (e.g., "<10 ms").

timestamp_resolution:
  type: string
  required: false
  # Timestamp precision (e.g., "<1 μs").

false_positive_rate:
  type: string
  required: false
  # False positive detection rate (e.g., "1/10,000").

multi_sensor_immunity:
  type: boolean
  required: false
  # Whether sensor has immunity to interference from other sensors.

interference_rejection:
  type: boolean
  required: false
  # Whether sensor can reject interference.

time_synchronization:
  type: list
  required: false
  schema:
    type: string
    allowed:
      - PTP
      - NMEA
      - PPS
      - GPS
      - Other
  # Time synchronization capabilities.

# ===== END LiDAR-SPECIFIC FIELDS =====

sensor_image:
  type: string
  required: false
  regex: '^https?://[^\s]+\.(jpg|jpeg|png|gif)$'
  # URL to an image of the sensor.

notes:
  type: string
  required: false
  # Additional notes or relevant information.
